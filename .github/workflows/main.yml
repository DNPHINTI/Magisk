name: Auto Fork, Build, and Release

on:
  schedule:
    - cron: '*/10 * * * *'  # 每天10分钟检查一次

jobs:
  update-build-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout this repository
      uses: actions/checkout@v3
      
    - name: Fork Magisk repository
      run: |
        git clone https://github.com/topjohnwu/Magisk
        cd Magisk
        git remote set-url origin https://github.com/DNPHINTI/Magisk.git
        git fetch origin
        git branch -u origin/master
        git pull origin master

    - name: Check for changes
      id: check_changes
      run: |
        git diff --exit-code || echo "::set-output name=has_changes::true"

    - name: Update libs.versions.toml
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo '[versions]
        kotlin = "2.0.20"
        android = "8.7.0"
        ksp = "2.0.20-1.0.25"
        rikka = "1.3.0"
        navigation = "2.8.2"
        libsu = "6.0.0"
        moshi = "1.15.1"
        okhttp = "4.12.0"
        retrofit = "2.11.0"
        room = "2.6.1"

        [libraries]
        bcpkix = { module = "org.bouncycastle:bcpkix-jdk18on", version = "1.78.1" }
        commons-compress = { module = "org.apache.commons:commons-compress", version = "1.27.1" }
        retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
        retrofit-moshi = { module = "com.squareup.retrofit2:converter-moshi", version.ref = "retrofit" }
        retrofit-scalars = { module = "com.squareup.retrofit2:converter-scalars", version.ref = "retrofit" }
        markwon-core = { module = "io.noties.markwon:core", version = "4.6.2" }
        okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
        okhttp-dnsoverhttps = { module = "com.squareup.okhttp3:okhttp-dnsoverhttps", version.ref = "okhttp" }
        okhttp-logging = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp" }
        moshi = { module = "com.squareup.moshi:moshi", version.ref = "moshi" }
        moshi-codegen = { module = "com.squareup.moshi:moshi-kotlin-codegen", version.ref = "moshi" }
        timber = { module = "com.jakewharton.timber:timber", version = "5.0.1" }
        jgit = { module = "org.eclipse.jgit:org.eclipse.jgit", version = "6.10.0.202406032230-r" }

        # AndroidX
        activity = { module = "androidx.activity:activity", version = "1.9.2" }
        appcompat = { module = "androidx.appcompat:appcompat", version = "1.7.0" }
        core-ktx = { module = "androidx.core:core-ktx", version = "1.13.1" }
        core-splashscreen = { module = "androidx.core:core-splashscreen", version = "1.0.1" }
        constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version = "2.1.4" }
        fragment-ktx = { module = "androidx.fragment:fragment-ktx", version = "1.8.4" }
        navigation-fragment-ktx = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "navigation" }
        navigation-ui-ktx = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigation" }
        profileinstaller = { module = "androidx.profileinstaller:profileinstaller", version = "1.4.1" }
        recyclerview = { module = "androidx.recyclerview:recyclerview", version = "1.3.2" }
        room-ktx = { module = "androidx.room:room-ktx", version.ref = "room" }
        room-runtime = { module = "androidx.room:room-runtime", version.ref = "room" }
        room-compiler = { module = "androidx.room:room-compiler", version.ref = "room" }
        swiperefreshlayout = { module = "androidx.swiperefreshlayout:swiperefreshlayout", version = "1.1.0" }
        transition = { module = "androidx.transition:transition", version = "1.5.1" }
        collection-ktx = { module = "androidx.collection:collection-ktx", version = "1.4.4" }
        lifecycle-process = { module = "androidx.lifecycle:lifecycle-process", version = "2.8.6" }
        material = { module = "com.google.android.material:material", version = "1.12.0" }
        jdk-libs = { module = "com.android.tools:desugar_jdk_libs_nio", version = "2.1.2" }

        # topjohnwu
        indeterminate-checkbox = { module = "com.github.topjohnwu:indeterminate-checkbox", version = "1.0.7" }
        libsu-core = { module = "com.github.4accccc.libsu:core", version.ref = "libsu" }
        libsu-service = { module = "com.github.4accccc.libsu:service", version.ref = "libsu" }
        libsu-nio = { module = "com.github.4accccc.libsu:nio", version.ref = "libsu" }

        # Rikka
        rikka-recyclerview = { module = "dev.rikka.rikkax.recyclerview:recyclerview-ktx", version = "1.3.2" }
        rikka-layoutinflater = { module = "dev.rikka.rikkax.layoutinflater:layoutinflater", version.ref = "rikka" }
        rikka-insets = { module = "dev.rikka.rikkax.insets:insets", version.ref = "rikka" }

        # Build plugins
        android-gradle-plugin = { module = "com.android.tools.build:gradle", version.ref = "android" }
        ksp-plugin = { module = "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin", version.ref = "ksp" }
        navigation-safe-args-plugin = { module = "androidx.navigation:navigation-safe-args-gradle-plugin", version.ref = "navigation" }
        lsparanoid-plugin = { module = "org.lsposed.lsparanoid:gradle-plugin", version = "0.6.0" }

        [plugins]' > gradle/libs.versions.toml

    - name: Commit changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git add gradle/libs.versions.toml
        git commit -m "Update libs.versions.toml with new versions"
        git push origin master

    # Step to trigger the build
    - name: Trigger Magisk build
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          await github.actions.createWorkflowDispatch({
            owner: 'DNPHINTI',
            repo: 'Magisk',
            workflow_id: 'build.yml',
            ref: 'master'
          });

    # Download build artifacts
    - name: Download build artifacts
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: actions/download-artifact@v3

    # Extract APK files
    - name: Extract APK files
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        mkdir extracted
        for file in $(ls | grep -v '^avd' | grep -v '^cvd' | grep -v 'symbols$'); do
          unzip $file -d extracted/
        done
        mv extracted/app-debug.apk ./app-debug.apk
        mv extracted/app-release.apk ./app-release.apk

    # Fetch release description from topjohnwu/Magisk
    - name: Get description from topjohnwu/Magisk
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        curl -s https://api.github.com/repos/topjohnwu/Magisk/releases | \
        jq -r '.[0].body' > description.txt

    # Create a new release
    - name: Create a new release
      if: steps.check_changes.outputs.has_changes == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "latest"
        release_name: "Magisk APK Release"
        body_path: ./description.txt
        draft: false
        prerelease: true

    # Upload APK files (debug)
    - name: Upload app-debug.apk
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./app-debug.apk
        asset_name: app-debug.apk
        asset_content_type: application/vnd.android.package-archive

    # Upload APK files (release)
    - name: Upload app-release.apk
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./app-release.apk
        asset_name: app-release.apk
        asset_content_type: application/vnd.android.package-archive
